// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Banner defines model for Banner.
type Banner struct {
	// Cpm Стоимость за тысячу показов
	Cpm float64 `json:"cpm"`

	// Feature Числовая характеристика баннера
	Feature int `json:"feature"`

	// Geo Географический код (2 символа, например, RU, US)
	Geo string `json:"geo"`

	// Id Уникальный идентификатор баннера
	Id openapi_types.UUID `json:"id"`

	// Image URL или путь к изображению баннера
	Image string `json:"image"`

	// Name Название баннера
	Name string `json:"name"`
}

// BannerInput defines model for BannerInput.
type BannerInput struct {
	// Cpm Стоимость за тысячу показов
	Cpm float64 `json:"cpm"`

	// Feature Числовая характеристика баннера
	Feature int `json:"feature"`

	// Geo Географический код (2 символа, например, RU, US)
	Geo string `json:"geo"`

	// Image URL или путь к изображению баннера
	Image string `json:"image"`

	// Name Название баннера
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	// Message Описание ошибки
	Message string `json:"message"`
}

// GetBannerAuctionParams defines parameters for GetBannerAuction.
type GetBannerAuctionParams struct {
	Geo     string `form:"geo" json:"geo"`
	Feature int    `form:"feature" json:"feature"`
}

// CreateBannerJSONRequestBody defines body for CreateBanner for application/json ContentType.
type CreateBannerJSONRequestBody = BannerInput

// UpdateBannerJSONRequestBody defines body for UpdateBanner for application/json ContentType.
type UpdateBannerJSONRequestBody = BannerInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список баннеров
	// (GET /banners)
	GetBanners(ctx echo.Context) error
	// Создать новый баннер
	// (POST /banners)
	CreateBanner(ctx echo.Context) error
	// Провести аукцион первой цены
	// (GET /banners/auction)
	GetBannerAuction(ctx echo.Context, params GetBannerAuctionParams) error
	// Удалить баннер
	// (DELETE /banners/{id})
	DeleteBanner(ctx echo.Context, id openapi_types.UUID) error
	// Получить баннер по ID
	// (GET /banners/{id})
	GetBannerById(ctx echo.Context, id openapi_types.UUID) error
	// Обновить баннер
	// (PUT /banners/{id})
	UpdateBanner(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBanners converts echo context to params.
func (w *ServerInterfaceWrapper) GetBanners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBanners(ctx)
	return err
}

// CreateBanner converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBanner(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBanner(ctx)
	return err
}

// GetBannerAuction converts echo context to params.
func (w *ServerInterfaceWrapper) GetBannerAuction(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBannerAuctionParams
	// ------------- Required query parameter "geo" -------------

	err = runtime.BindQueryParameter("form", true, true, "geo", ctx.QueryParams(), &params.Geo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter geo: %s", err))
	}

	// ------------- Required query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, true, "feature", ctx.QueryParams(), &params.Feature)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feature: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBannerAuction(ctx, params)
	return err
}

// DeleteBanner converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBanner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBanner(ctx, id)
	return err
}

// GetBannerById converts echo context to params.
func (w *ServerInterfaceWrapper) GetBannerById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBannerById(ctx, id)
	return err
}

// UpdateBanner converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBanner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateBanner(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/banners", wrapper.GetBanners)
	router.POST(baseURL+"/banners", wrapper.CreateBanner)
	router.GET(baseURL+"/banners/auction", wrapper.GetBannerAuction)
	router.DELETE(baseURL+"/banners/:id", wrapper.DeleteBanner)
	router.GET(baseURL+"/banners/:id", wrapper.GetBannerById)
	router.PUT(baseURL+"/banners/:id", wrapper.UpdateBanner)

}
