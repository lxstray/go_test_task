// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db_generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBanner = `-- name: CreateBanner :one
INSERT INTO banners (name, image, cpm, geo, feature)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, image, cpm, geo, feature
`

type CreateBannerParams struct {
	Name    string
	Image   string
	Cpm     pgtype.Numeric
	Geo     string
	Feature int32
}

func (q *Queries) CreateBanner(ctx context.Context, arg CreateBannerParams) (Banner, error) {
	row := q.db.QueryRow(ctx, createBanner,
		arg.Name,
		arg.Image,
		arg.Cpm,
		arg.Geo,
		arg.Feature,
	)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Cpm,
		&i.Geo,
		&i.Feature,
	)
	return i, err
}

const deleteBanner = `-- name: DeleteBanner :exec
DELETE FROM banners
WHERE id = $1
`

func (q *Queries) DeleteBanner(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteBanner, id)
	return err
}

const selectAll = `-- name: SelectAll :many
SELECT id, name, image, cpm, geo, feature FROM banners
`

func (q *Queries) SelectAll(ctx context.Context) ([]Banner, error) {
	rows, err := q.db.Query(ctx, selectAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Banner
	for rows.Next() {
		var i Banner
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Cpm,
			&i.Geo,
			&i.Feature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectById = `-- name: SelectById :one
SELECT id, name, image, cpm, geo, feature FROM banners
WHERE id = $1
LIMIT 1
`

func (q *Queries) SelectById(ctx context.Context, id pgtype.UUID) (Banner, error) {
	row := q.db.QueryRow(ctx, selectById, id)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Cpm,
		&i.Geo,
		&i.Feature,
	)
	return i, err
}

const selectTopBanner = `-- name: SelectTopBanner :one
SELECT id, name, image, cpm, geo, feature FROM banners
WHERE geo = $1 AND feature = $2
ORDER BY cpm DESC
LIMIT 1
`

type SelectTopBannerParams struct {
	Geo     string
	Feature int32
}

func (q *Queries) SelectTopBanner(ctx context.Context, arg SelectTopBannerParams) (Banner, error) {
	row := q.db.QueryRow(ctx, selectTopBanner, arg.Geo, arg.Feature)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Cpm,
		&i.Geo,
		&i.Feature,
	)
	return i, err
}

const updateBanner = `-- name: UpdateBanner :one
UPDATE banners
SET name = $2, image = $3, cpm = $4, geo = $5, feature = $6
WHERE id = $1
RETURNING id, name, image, cpm, geo, feature
`

type UpdateBannerParams struct {
	ID      pgtype.UUID
	Name    string
	Image   string
	Cpm     pgtype.Numeric
	Geo     string
	Feature int32
}

func (q *Queries) UpdateBanner(ctx context.Context, arg UpdateBannerParams) (Banner, error) {
	row := q.db.QueryRow(ctx, updateBanner,
		arg.ID,
		arg.Name,
		arg.Image,
		arg.Cpm,
		arg.Geo,
		arg.Feature,
	)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Cpm,
		&i.Geo,
		&i.Feature,
	)
	return i, err
}
